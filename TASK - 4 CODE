import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
data_path = 'advertising.csv'  # Replace with the actual path to the dataset
advertising_data = pd.read_csv(data_path)

# Display the first few rows of the dataset
print(advertising_data.head())

# Check for missing values
print(advertising_data.isnull().sum())

# Basic statistics
print(advertising_data.describe())

# Exploratory Data Analysis (EDA)
plt.figure(figsize=(10, 6))
sns.heatmap(advertising_data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

#Pairplot to visualize relationships between variables
sns.pairplot(advertising_data)
plt.show()

# Scatter plot for TV vs Sales
plt.figure(figsize=(8, 5))
sns.scatterplot(data=advertising_data, x='TV', y='Sales', color='blue')
plt.title('TV Advertising vs Sales')
plt.xlabel('TV Advertising Budget ($)')
plt.ylabel('Sales ($)')
plt.show()

# Scatter plot for Radio vs Sales
plt.figure(figsize=(8, 5))
sns.scatterplot(data=advertising_data, x='Radio', y='Sales', color='green')
plt.title('Radio Advertising vs Sales')
plt.xlabel('Radio Advertising Budget ($)')
plt.ylabel('Sales ($)')
plt.show()

# Scatter plot for Newspaper vs Sales
plt.figure(figsize=(8, 5))
sns.scatterplot(data=advertising_data, x='Newspaper', y='Sales', color='red')
plt.title('Newspaper Advertising vs Sales')
plt.xlabel('Newspaper Advertising Budget ($)')
plt.ylabel('Sales ($)')
plt.show()

# Prepare data for modeling
X = advertising_data[['TV', 'Radio', 'Newspaper']]
y = advertising_data['Sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared: {r2:.2f}')

# Visualize actual vs predicted sales
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, color='purple')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linewidth=2)
plt.title('Actual vs Predicted Sales')
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.show()

# Display feature importance
coefficients = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})
print(coefficients)
